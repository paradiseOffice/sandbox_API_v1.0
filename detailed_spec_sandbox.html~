<html>
<head>
  <title>Software Requirements Specification - Sandbox</title>

  <link rel="stylesheet" type="text/css" ref="spec.css" />
</head>
<body class="spec" id="sandbox">

<div class="header">
  <p class="printHeader">Paradise Sandbox and Cygnet</p>
</div>

<div id="titlePage">
  <h1>Paradise Sandbox API</h1> <h2>Specification</h2>
  <h3>Hazel Windle</h3>
</div>

<div class="introduction">
  <h2>Introduction</h2>
  <p>A description of the underlying API for the Paradise Office suite, called 'Sandbox'. How to use the API to build web applications. This document is intended for those with some programming knowledge. The Paradise Sandbox is a set of functions written in common web programming languages to greatly simplify building complex web applications such as a word processor for instance. The 'Cygnet' language is a method of calling functions, and is an easy language used to construct applications without any computer programming experience.</p>
</div>

<div class="sys_overview">
<h2>System Overview</h2>
<p>The functions are grouped into areas such as data processing, UI elements and threads (for faster program execution).</p>
<h3>Design Considerations</h3>
<p>There aren't any issues except for maybe software patents held by big companies</p>
<h3>Assumptions and Dependencies</h3>
<ul>
  <li>Either a Linux, Mac or Windows operating system.</li>
  <li>A web browser with CSS3 support, HTML5 and Javascript</li>
    <ul>
      <li>Firefox 16</li>
      <li>Internet Explorer 9</li>
      <li>Opera 11</li>
      <li>Chrome (released in 2012 or after)</li>
      <li>Safari (released in 2012 or after)</li>
    </ul>
  <li>A screen resolution with a width of 320 pixels for mobiles, 500 pixels for tablets, and 700 pixels for desktops. Those are the minimums.</li>
  <li>A computing device with at least a: 1GHZ CPU, 512MB RAM, 1GB HDD, and an internet connection.</li>
  <li>A user account for Paradise Office.</li>
  <li>People who've used software or the internet before.</li>
  <li>Easy to alter pricing models or deploy the code on a companies internal servers.</li>
  <li>Easy to add new functions to the API.</li>
</ul>

<h3>General Constraints</h3>
<ol>
  <li><h4>Hardware</h4></li>
    <ul>
      <li>Able to run on the client side in 512MB of memory.</li>
      <li>No screen redraws or events going to the server.</li>
      <li>The screen size could be very large as large monitor sizes become available.</li>
      <li>Touch operated controls, all buttons need to be finger sized.</li>
      <li>Only runs through a SSL connection.</li>
    </ul>
  <li><h4>Software</h4></li>
    <ul>
      <li>Abililty to save either a cookie, session information or both.</li>
      <li>Javascript could be disabled or an older browser could be used.</li>
      <li>SVG and PNG can't be used properly in Internet Explorers earlier than version 9.</li>
      <li>Database data has to be kept on the client side always (other database servers can be connected to).</li>
    </ul>
  <li><h4>End Users</h4></li>
    <ul>
      <li>They may be used to Microsoft Office</li>
      <li>Make it clear where the files are being downloaded to.</li>
      <li>They may speak a different language.</li>
      <li>They may be disabled in some way.</li>
      <li>They may be suspicious of internet privacy because of Google and the NSA.</li>
    </ul>
  <li><h4>Resources</h4></li>
    <p>To start with, they'll only be one application server.</p>
  <li><h4>Standards</h4></li>
    <ul>
      <li>Adhere to HTML 5 and XHTML 1.0 in places.</li>
      <li>Accessibility guidelines must be followed (WCAG).</li>
      <li>CSS 2.1 and 3 to be used.</li>
      <li>XML and PDF standards used for some file formats.</li>
      <li>All text to be in UTF-8 encoding.</li>
    </ul>
  <li><h4>Interoperability</h4></li>
    <p>The open document XML file formats used in Libreoffice are to be used and will be the default format to save in.</p>
  <li><h4>Protocols</h4></li>
    <p>Will be used over port 443 for secure http traffic.</p>
  <li><h4>Data</h4></li>
    <p>The program source will be kept on github. All data will be the responsibility of the user. When in beta testing, warnings will be given to the user if any data could get mangled.</p>
  <li><h4>Security</h4></li>
    <p>A user must login over https, and the passwords will have a salt added to them, and be encrypted. The encryption method is yet to be decided.</p>
  <li><h4>Memory</h4></li>
    <p>Nginx may be used instead of Apache to preserve memory. PHP closures could also be used.</p>
  <li><h4>Performance / Network</h4></li>
    <p>A VPS will be a slow one to test things at first, then I'll upgrade to a gigabit ethernet one.</p>
  <li><h4>Testing</h4></li>
    <p>I don't own a tablet, nor do I own a Windows PC with Internet Explorer. I'll have to test things some other way.</p>
  <li><h4>Quality Goals</h4></li>
    <p>It should be good enough to have no discernable speed lapses or crashes compared to Libreoffice 4.0.4.2.</p>
</ol>
</div>

<div class="goals">
<h2>Goals and Guidelines</h2>
<h3>Priorities</h3>
<ul>
  <li>Easy for developers to understand</li>
  <li>Cross platform</li>
  <li>Easy to add new features</li>
  <li>Easy to add Python scripts to events</li>
</ul>
<h3>Principles</h3>
<ul>
  <li>The kiss principle (&quot;keep it simple stupid!&quot;)</li>
  <li>Unix small elegant tools chained together philosophy</li>
</ul>
<h3>Guidelines</h3>
<p>Push open standards like HTML and XML wherever possible.</p>
</div>

<div class="dev_methods">
<h2>Development Methods</h2>
<p>briefly describe the
method or approach used for this software design. if one or more
formal/published methods were adopted or adapted, then include a
reference to a more detailed description of these methods. if several
methods were seriously considered, then each such method should be
mentioned, along with a brief explanation of why all or part of it
was used or not used.</p>
</div>

<div class="strategies">
<h2>Architectural Strategies</h2>
<h3>Strategy 1</h3>
<p>describe any design
decisions and/or strategies that affect the overall organization of
the system and its higher-level structures. these strategies should
provide insight into the key abstractions and mechanisms used in the
system architecture. describe the reasoning employed for each
decision and/or strategy (possibly referring to previously stated
design goals and principles) and how any design goals or priorities
were balanced or traded-off. such decisions might concern (but are
not limited to) things like the following:</p>
<ul>
  <li>use of a
  particular type of product (programming language, database, library,
  etc. ...)</li>
  <li>reuse of existing
  software components to implement various parts/features of the
  system</li>
  <li>future plans for
  extending or enhancing the software</li>
  <li>user interface
  paradigms (or system input and output models)</li>
  <li>hardware and/or  software interface paradigms</li>
  <li>error detection and recovery</li>
  <li>memory management policies</li>
  <li>external databases and/or data storage management and persistence</li>
  <li>distributed data  or control over a network</li>
  <li>generalized approaches to control</li>
  <li>concurrency and synchronization</li>
  <li>communication mechanisms</li>
  <li>management of other resources </li>
</ul>
<p>each significant
strategy employed should probably be discussed in its own subsection,
or (if it is complex enough) in a separate design document (with an
appropriate reference here of course). make sure that when describing
a design decision that you also discuss any other significant
alternatives that were considered, and your reasons for rejecting
them (as well as your reasons for accepting the alternative you
finally chose). sometimes it may be most effective to employ the
&quot;pattern format&quot; for describing a strategy.</p>
<h3>Strategy 2</h3>
</div>

<div class="sys_arch">
<h2>System Architecture</h2>
<p>this section should
provide a high-level overview of how the functionality and
responsibilities of the system were partitioned and then assigned to
subsystems or components. don't go into too much detail about the
individual components themselves (there is a subsequent section for
detailed component descriptions). the main purpose here is to gain a
general understanding of how and why the system was decomposed, and
how the individual parts work together to provide the desired
functionality.</p>
<p>at the top-most level,
describe the major responsibilities that the software must undertake
and the various roles that the system (or portions of the system)
must play. describe how the system was broken down into its
components/subsystems (identifying each top-level component/subsystem
and the roles/responsibilities assigned to it). describe how the
higher-level components collaborate with each other in order to
achieve the required results. don't forget to provide some sort of
rationale for choosing this particular decomposition of the system
(perhaps discussing other proposed decompositions and why they were
rejected). feel free to make use of design patterns, either in
describing parts of the architecture (in pattern format), or for
referring to elements of the architecture that employ them.</p>
<p>if there are any
diagrams, models, flowcharts, documented scenarios or use-cases of
the system behavior and/or structure, they may be included here
(unless you feel they are complex enough to merit being placed in the
detailed system design section). diagrams that describe a particular
component or subsystem should be included within the particular
subsection that describes that component or subsystem.</p>
<p>Note:   this section (and
its subsections) really applies only to newly developed (or yet-to-be
developed) portions of the system. if there are parts of the system
that already existed before this development effort began, then you
only need to describe the pre-existing parts that the new parts of
the system depend upon, and only in enough detail sufficient to
describe the relationships and interactions between the old parts and
the new parts. pre-existing parts that are modified or enhanced need
to be described only to the extent that is necessary for the reader
to gain a sufficient understanding of the nature of the changes that
were made. 
</p>
</div>

<div class="subsystems">
<h2>Subsystem Architecture</h2>
<p>if a particular
component is one which merits a more detailed discussion than what
was presented in the system architecture section, provide that more
detailed discussion in a subsection of the system architecture
section (or it may even be more appropriate to describe the component
in its own design document). if necessary, describe how the component
was further divided into subcomponents, and the relationships and
interactions between the subcomponents (similar to what was done for
top-level components in the system architecture section).</p>
<p>if any subcomponents
are also deemed to merit further discussion, then describe them in a
separate subsection of this section (and in a similar fashion).
proceed to go into as many levels/subsections of discussion as needed
in order for the reader to gain a high-level understanding of the
entire system or subsystem (but remember to leave the gory details
for the detailed system design section).</p>
<p>if this component is
very large and/or complex, you may want to consider documenting its
design in a separate document and simply including a reference to it
in this section. if this is the option you choose, the design
document for this component should have an organizational format that
is very similar (if not identical to) this document.</p>
<h3>Component 1</h3>
<h3>Component 2</h3>
</div>

<div class="policies">
<h2>Policies and Tactics</h2>
<p>describe any design
policies and/or tactics that do not have sweeping architectural
implications (meaning they would not significantly affect the overall
organization of the system and its high-level structures), but which
nonetheless affect the details of the interface and/or implementation
of various aspects of the system. such decisions might concern (but
are not limited to) things like the following:</p>
<ul>
  <li>choice of which
  specific product to use (compiler, interpreter, database, library,
  etc. ...)</li>
  <li>engineering trade-offs</li>
  <li>coding guidelines and conventions</li>
  <li>the protocol of one or more subsystems, modules, or subroutines</li>
  <li>the choice of a
  particular algorithm or programming idiom (or design pattern) to
  implement portions of the system's functionality</li>
  <li>plans for ensuring requirements traceability</li>
  <li>plans for testing the software</li>
  <li>plans for maintaining the software</li>
  <li>interfaces for
  end-users, software, hardware, and communications</li>
  <li>Hierarchical
  organization of the source code into its physical components (files
  and directories).</li>
  <li>how to build
  and/or generate the system's deliverables (how to compile, link,
  load, etc. ...) </li>
</ul>
<p>each particular policy
or set of tactics employed should probably be discussed in its own
subsection, or (if it is large or complex enough) in a separate
design document (with an appropriate reference here of course). make
sure that when describing a design decision that you also discuss any
other significant alternatives that were considered, and your reasons
for rejecting them (as well as your reasons for accepting the
alternative you finally chose). for this reason, it may frequently be
convenient to use one of the more popular &quot;pattern formats&quot;
to describe a given tactic.</p>
<p>for this particular
section, it may become difficult to decide whether a particular
policy or set of tactics should be discussed in this section, or in
the system architecture section, or in the detailed system design
section for the appropriate component. you will have to use your own
&quot;best&quot; judgement to decide this. there will usually be some
global policies and tactics that should be discussed here, but
decisions about interfaces, algorithms, and/or data structures might
be more appropriately discussed in the same (sub)section as its
corresponding software component in one of these other sections.</p>
<h3>Policy 2</h3>
</div>

<div class="detailed_design">
<h2>Detailed System Design</h2>
<p>most components
described in the system architecture section will require a more
detailed discussion. other lower-level components and subcomponents
may need to be described as well. each subsection of this section
will refer to or contain a detailed description of a system software
component. the discussion provided should cover the following
software component attributes:</p>
<h3>Classification</h3>
<p>    the kind of
component, such as a subsystem, module, class, package, function,
file, etc. ....</p>
<h3>Definition</h3>
<p>    the specific
purpose and semantic meaning of the component. this may need to refer
back to the requirements specification.</p>
<h3>Responsibilities</h3>
<p>    the primary
responsibilities and/or behavior of this component. what does this
component accomplish? what roles does it play? what kinds of services
does it provide to its clients? for some components, this may need to
refer back to the requirements specification.</p>
<h3>Constraints</h3>
<p>    any relevant
assumptions, limitations, or constraints for this component. this
should include constraints on timing, storage, or component state,
and might include rules for interacting with this component
(encompassing preconditions, postconditions, invariants, other
constraints on input or output values and local or global values,
data formats and data access, synchronization, exceptions, etc.)</p>
<h3>Composition</h3>
<p>    a description of
the use and meaning of the subcomponents that are a part of this
component.</p>
<h3>Uses/Interactions</h3>
<p>    a description of
this components collaborations with other components. what other
components is this entity used by? what other components does this
entity use (this would include any side-effects this entity might
have on other parts of the system)? this concerns the method of
interaction as well as the interaction itself. object-oriented
designs should include a description of any known or anticipated
subclasses, superclasses, and metaclasses.</p>
<h3>Resources</h3>
<p>    a description of
any and all resources that are managed, affected, or needed by this
entity. resources are entities external to the design such as memory,
processors, printers, databases, or a software library. this should
include a discussion of any possible race conditions and/or deadlock
situations, and how they might be resolved.</p>
<h3>Processing</h3>
<p>    a description of
precisely how this components goes about performing the duties
necessary to fulfill its responsibilities. this should encompass a
description of any algorithms used; changes of state; relevant time
or space complexity; concurrency; methods of creation,
initialization, and cleanup; and handling of exceptional conditions.</p>
<h3>Interface/Exports</h3>
<p>    the set of services
(resources, data, types, constants, subroutines, and exceptions) that
are provided by this component. the precise definition or declaration
of each such element should be present, along with comments or
annotations describing the meanings of values, parameters, etc. ....
for each service element described, include (or provide a reference)
in its discussion a description of its important software component
attributes (classification, definition, responsibilities,
constraints, composition, uses, resources, processing, and
interface).</p>
<p>much of the information
that appears in this section is not necessarily expected to be kept
separate from the source code. in fact, much of the information can
be gleaned from the source itself (especially if it is adequately
commented). this section should not copy or reproduce information
that can be easily obtained from reading the source code (this would
be an unwanted and unnecessary duplication of effort and would be
very difficult to keep up-to-date). it is recommended that most of
this information be contained in the source (with appropriate
comments for each component, subsystem, module, and subroutine).
hence, it is expected that this section will largely consist of
references to or excerpts of annotated diagrams and source code. any
referenced diagrams or source code excerpts should be provided at any
design reviews.</p>
</div>

<div class="subsystem_details">
<h2>Detailed Subsystem Design</h2>
<p>provide a detailed
description of this software component (or a reference to such a
description). complex diagrams showing the details of component
structure, behavior, or information/control flow may be included in
the subsection devoted to that particular component (although, unless
they are very large or complex, some of these diagrams might be more
appropriately included in the system architecture section. the
description should cover any applicable software component attributes
(some of which may be adequately described solely by a source code
declaration or excerpt).</p>
<h3>Module 1</h3>
</div>

<div class="glossary">
<h2>Glossary</h2>
<p>an ordered list of
defined terms and concepts used throughout the document.</p>
</div>

<div class="biblo">
<h2>Bibliography</h2>
<p>a list of referenced and/or related publications.</p>
</div>

<div class="footer">
 <p>appname - written by Hazel Windle and modified on date.</p>
</div>


<script type="text/JavaScript"
src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js">
</script>
<script type="text/JavaScript">
</script>

</body>
</html>